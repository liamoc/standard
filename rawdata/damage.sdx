{
	data: {
		absolute: function(action, source, targets) {
			var damages = [];
			for (var i = 0; i < targets.length; i++)
			{
				damages.push(action.power);
			}
			return damages;
		},
		physical: function(action, source, targets) {
			var damages = [];
			for (var i = 0; i < targets.length; i++)
			{
				
				var source_strength = source.getStat("strength");
				
				var strength = source_strength + Random(source_strength / 2, source_strength);
				var modifier = (source.stats.level * source_strength) / 128 + 2;
				var defense = targets[i].getStat("defense");
				//Abort(strength + "," + modifier + "," + defense);
				damages.push(
					Math.min(Settings.get("maxDamage"), Math.max(0, Math.floor((strength - defense) * modifier)))
				);
				
			}
			return damages;
		},
		magical_cure: function(action, source, targets) {
			var damages = [];
			for (var i = 0; i < targets.length; i++)
			{
				var strength = action.power + Random(0, action.power / 8);
				var modifier  = (source.stats.level*source.getStat("magic")) / 256 + 4;
				var defense = targets[0].getStat("spirit");
				
				damages.push(
					-Math.min(Settings.get("maxDamage"), Math.max(0, Math.floor((strength - defense) * modifier)))
				);
			}
			return damages;
		},
		throw_item: function(action, source, targets, item) {
			var damages = [];
			for (var i = 0; i < targets.length; i++)
			{
				var source_strength = item.stats.strength * 3;
				
				var strength = source_strength + Random(source_strength / 2, source_strength);
				var modifier = (source.stats.level * source_strength) / 128;
				var defense = targets[0].getStat("defense");
				
				damages.push(
					Math.min(Settings.get("maxDamage"), Math.max(0, Math.floor((strength - defense) * modifier)))
				);
			}
			return damages;
		}
	},
	
	compilePath: "damage.sdx"
}